name: Comprehensive Test Suite

# 🎯 When this runs:
# - Manual trigger only (workflow_dispatch) - for pre-release validation  
# - Weekly automated (Mondays 2 AM UTC) - for regular health checks
# - Auto-trigger ONLY on very high-risk file changes (auth, server core, deps)
# 
# ⚡ For daily development: Use Fast CI (runs in ~30 seconds)
# 🔍 For thorough validation: Manually trigger this comprehensive suite

on:
  # Manual triggering only (for pre-release validation)
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running comprehensive tests'
        required: false
        default: 'Manual validation before release'
  
  # Weekly automated run (Mondays at 2 AM UTC)  
  schedule:
    - cron: '0 2 * * 1'
  
  # ONLY trigger automatically on very high-risk changes
  push:
    branches: [ main ]
    paths:
      # Core server files (high risk)
      - 'src/server.js'
      - 'src/database.js'
      
      # Authentication & security (very high risk)
      - 'src/middleware/auth.js'
      - 'src/middleware/rateLimiters.js'
      - 'src/utils/token.js'
      - 'src/utils/validation.js'
      
      # Critical dependencies (high risk)
      - 'package.json'
      - 'package-lock.json'
      
      # Workflow changes (meta - high risk)
      - '.github/workflows/**'

jobs:
  unit-tests:
    name: Unit Tests (All)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run all unit tests with coverage
      run: npm run test:unit
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests (Full)
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Prevent 15+ min hangs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run integration tests
      run: npm run test:integration
      timeout-minutes: 8  # Step-level timeout
      env:
        NODE_ENV: test

  e2e-tests:
    name: E2E Tests (Full)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Start test server
      run: |
        npm run dev &
        sleep 10
      env:
        NODE_ENV: test
        PORT: 3000
        
    - name: Run E2E tests
      run: npm run test:e2e:ci
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  security-comprehensive:
    name: Security Analysis (Deep)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Full security audit
      run: npm audit --audit-level moderate
      
    - name: Run security regression tests (production only)
      run: |
        if [ "$NODE_ENV" = "production" ]; then
          node scripts/security/security-regression.test.js
        else
          echo "Skipping security regression tests in non-production environment"
          echo "Security coverage provided by integration tests instead"
        fi
      env:
        NODE_ENV: test
        
    - name: Check for vulnerabilities
      run: |
        AUDIT_OUTPUT=$(npm audit --audit-level high --json)
        HIGH_VULN_COUNT=$(echo "$AUDIT_OUTPUT" | jq -r '.metadata.vulnerabilities.high // 0')
        CRITICAL_VULN_COUNT=$(echo "$AUDIT_OUTPUT" | jq -r '.metadata.vulnerabilities.critical // 0')
        
        if [ "$HIGH_VULN_COUNT" -gt 0 ] || [ "$CRITICAL_VULN_COUNT" -gt 0 ]; then
          echo "High or critical severity vulnerabilities found!"
          echo "High: $HIGH_VULN_COUNT, Critical: $CRITICAL_VULN_COUNT"
          npm audit --audit-level high
          exit 1
        else
          echo "No high or critical vulnerabilities found ✅"
        fi

  code-quality:
    name: Code Quality & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check code coverage thresholds
      run: npm run test:coverage
      
    - name: Validate package.json
      run: npm run test -- --passWithNoTests --testPathPattern="non-existent-path" --json --coverage=false || true

  production-smoke-tests:
    name: Production Validation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run production smoke tests
      run: npm run test:smoke
      env:
        NODE_ENV: production
        TEST_PRODUCTION: true

  comprehensive-summary:
    name: Comprehensive Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-comprehensive, code-quality]
    if: always()
    
    steps:
    - name: Test results summary
      run: |
        echo "## Comprehensive Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Analysis: ${{ needs.security-comprehensive.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.e2e-tests.result }}" == "success" && 
              "${{ needs.security-comprehensive.result }}" == "success" && 
              "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "- 🎉 **All comprehensive tests passed!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ **Some tests failed - review required**" >> $GITHUB_STEP_SUMMARY
        fi